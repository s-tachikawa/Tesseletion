//---------------------------------------------------------
// 
//	iruna_refernce_counter.h
//	スマートポインタテンプレート構造体
//	作成日 11月24日
//	製作者 立川 翔野
// 
//---------------------------------------------------------
/*----多重インクルード防止-------------------------------------------------*/
#ifndef IRUNA_REFERNCE_H
#define IRUNA_REFERNCE_H

/*----インクルード-------------------------------------------------*/
#include "../Include/iruna_types.h"

/*----データ型宣言-------------------------------------------------*/
namespace iruna
{

//=====================================================================
//
//	クラス名	:	RefernceCounter
//	処理		:	参照カウントが必要なデータ型で定義して参照カウントを制御する
//	製作者		:	立川 翔野
//	作成日		:	2011/011/24	- 作成
//
//=====================================================================
template< class T > class RefernceCounter
{
//	パブリック	メンバ変数
public:

	T*		data;		//	テンプレート変数
	UINT	count;		//	参照カウント

//	パブリック	メンバ関数
public:

//--------------------------------------------------------------------
// 
//	処理		:	コンストラクタ
// 
//--------------------------------------------------------------------
RefernceCounter()
{
	data = new T;
	count = 1;
	return;
}

//--------------------------------------------------------------------
// 
//	処理		:	デストラクタ
// 
//--------------------------------------------------------------------
~RefernceCounter()
{
	Relese();
	return;
}

//--------------------------------------------------------------------
// 
//	処理		:	=演算子のオーバーロード(参照カウントをプラスする)
//	第1引数		:	[in]src - コピーするテンプレート引数
// 
//--------------------------------------------------------------------
const T* operator =( const T* src )
{
	if( src == NULL )
		return;

	count++;

	return src;

}

//--------------------------------------------------------------------
// 
//	処理		:	=演算子のオーバーロード(参照カウントをプラスする)
//	第1引数		:	[in]src - コピーするテンプレート引数
// 
//--------------------------------------------------------------------
const T& operator =( const T& src )
{
	if( src == NULL )
		return;

	count++;

	return src;
}

//--------------------------------------------------------------------
// 
//	処理		:	解放処理
// 
//--------------------------------------------------------------------
void Relese()
{
	--count;
	if( count > 0 )
		return;
}


};

}	//	iruna	end


#endif	//	IRUNA_REFERNCE_H	end