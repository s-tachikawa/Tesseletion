//*********************************************************************
/*!
	@file	iruna_bone.h
	@brief	ボーン管理構造体
	@author	立川 翔野
	@date	2011/11/01 	- 作成
*/
//*********************************************************************
/*----多重インクルード---------------------------------*/
#ifndef IRUNA_BONE_H
#define IRUNA_BONE_H

/*----インクルード---------------------------------*/
#include "../Include/iruna_utility.h"
#include "../Include/iruna_math.h"

/*----データ型 宣言------------------------------------------------*/
namespace iruna
{
namespace graphics
{

//!=====================================================================
//!
//! @struct	Bone
//! @brief	アニメーションボーン管理構造体
//!
//!=====================================================================
struct Bone
{
public:

	int								id;			//!<	ボーンID
	int								parentId;	//!<	親のID
	int								childId;	//!<	子のID
	int								type;		//!<	ボーンタイプ
	int								IkId;		//!<	IKターゲットボーン番号
	std::string						boneName;	//!<	ボーンの名前
	std::vector< math::Matrix >		boneMat;	//!<	アニメーション用平行移動行列
	math::Vector3					originePos;	//!<	ボーンのローカル座標
	math::Matrix					init;		//!<	初期姿勢
	math::Matrix					offset;		//!<	オフセット行列
	math::Matrix					tran;		//!<	平行移動行列
	math::Matrix					comb;		//!<	合成行列
	math::Matrix					skin;		//!<	スキニング行列
	math::Matrix					test;		
	std::vector< Bone* >			child;		//!<	子ボーンコンテナ

public:
	//!--------------------------------------------------------------------
	//! 
	//! @brief	コンストラクタ
	//! 
	//!--------------------------------------------------------------------
	Bone();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	ボーンの相対座標を親の相対座標に変える(再帰関数)
	//! @param	[in] parentOffset	- 親ボーンのオフセット行列
	//! 
	//!--------------------------------------------------------------------
	void BoneRun( math::Matrix* parentOffset );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	ボーンを更新してスキニングマトリックスを作成する
	//! @param	[in] parent	- 自身の親ボーン合成行列
	//! 
	//!--------------------------------------------------------------------
	void BoneUpDate( math::Matrix parent );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	ボーンに初期姿勢を登録する
	//! @param	[in] initMat	- 登録する初期姿勢行列
	//! 
	//!--------------------------------------------------------------------
	void SetInitMatrix( math::Matrix initMat );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	3次元座標からボーンに初期姿勢を登録する
	//! @param	[in] bonePos	- 登録する初期姿勢の3次元座標
	//! 
	//!--------------------------------------------------------------------
	void SetInitMatrix( math::Vector3 bonePos );

};

}	//	graphics	end
}	//	iruna		end

#endif	//	IRUNA_BONE_H	end