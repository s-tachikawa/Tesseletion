//*********************************************************************
/*!
	@file	iruna_math_functions.h
	@brief	数学関数関連
	@author	立川 翔野
	@date	2011/11/23	- 作成
*/
//*********************************************************************
/*----多重インクルード防止-------------------------------------------------*/
#ifndef IRUNA_MATH_FUNCTION_H
#define IRUNA_MATH_FUNCTION_H

/*----インクルード-------------------------------------------------*/
#include "../Include/iruna_utility.h"
#include "../Include/iruna_vector3.h"
#include "../Include/iruna_vector2.h"
#include "../Include/iruna_matrix.h"

/*----データ型宣言-------------------------------------------------*/
namespace iruna
{
namespace math
{
/*----グローバル関数宣言-------------------------------------------------*/

//!--------------------------------------------------------------------
//! 
//! @brief	3次元ベクトル同士の外積を求める
//! @param	[in] vec1	- 1つ目のベクトル
//! @param	[in] vec2	- 2つ目のベクトル
//! @retval	外積の結果
//! 
//!--------------------------------------------------------------------
Vector3	Cross( Vector3 vec1, Vector3 vec2 );

//!--------------------------------------------------------------------
//! 
//! @brief	2次元ベクトルの外積を求める
//! @param	[in] vec1	- 1つ目のベクトル
//! @param	[in] vec2	- 2つ目のベクトル
//! @retval	正	vec1 に対しvec2が左側　負正	vec1 に対しvec2が右側
//! 
//!--------------------------------------------------------------------
float	Cross2D( Vector2 vec1, Vector2 vec2 );


//!--------------------------------------------------------------------
//! 
//! @brief	3次元ベクトル同士の内積を求める
//! @param	[in] vec1	- 1つ目のベクトル
//! @param	[in] vec2	- 2つ目のベクトル
//! @retval	内積の結果
//! 
//!--------------------------------------------------------------------
float	Dot( Vector3 vec1, Vector3 vec2  );

//!--------------------------------------------------------------------
//! 
//! @brief	3次元ベクトルを長さの2乗を求める
//! @param	[in] vec	- 長さを求めるベクトル
//! @retval	ベクトルの長さの2乗
//! 
//!--------------------------------------------------------------------
float	LengthSqrt( Vector3 vec );

//!--------------------------------------------------------------------
//! 
//! @brief	3次元ベクトルを長さを求める
//! @param	[in] vec	- 長さを求めるベクトル
//! @retval	ベクトルの長さ
//! 
//!--------------------------------------------------------------------
float	Length( Vector3 vec );

//!--------------------------------------------------------------------
//! 
//! @brief	3次元ベクトルを正規化する
//! @param	[in] vec	- 正規化したいベクトル
//! @retval	正規化の結果
//! 
//!--------------------------------------------------------------------
Vector3 Normalize( Vector3 vec );

//!--------------------------------------------------------------------
//! 
//! @brief	指定した位置とベクトル,時間でエルミネートスプライン曲線補間する
//! @param	[in]	pos1	-	始点
//! @param	[inout]	pos2	-	終点
//! @param	[in]	vec1	-	始点制御ベクトル
//! @param	[inout]	vec2	-	終点制御ベクトル
//! @param	[in]	time	-	補間する位置(0〜1)
//! @retval	補間されたベクトル
//! 
//!--------------------------------------------------------------------
Vector3 HermiteLerp( Vector3 pos1, Vector3 pos2, Vector3 vec1, Vector3 vec2, float time );

//!--------------------------------------------------------------------
//! 
//! @brief	指定したベクトルとベクトルを線形補間する	t = 補間位置 t0 = 始点ム t1 = 終点	time = ( t - t0) / ( t1 - t0 )
//! @param	[in]	vec1	-	始点ベクトル
//! @param	[in]	vec2	-	終点ベクトル
//! @param	[in]	time	-	補間位置(0〜1) 
//! @retval	補間されたベクトル
//! 
//!--------------------------------------------------------------------
Vector3 Lerp( Vector3 vec1,Vector3 vec2, float time );

//!--------------------------------------------------------------------
//! 
//! @brief	指定した行列と行列の線形補間して姿勢補間する	t = 補間位置 t0 = 始点ム t1 = 終点	time = ( t - t0) / ( t1 - t0 )
//! @param	[in]	mat1	-	始点行列
//! @param	[in]	mat2	-	終点行列
//! @param	[in]	time	-	補間位置(0〜1) 
//! @retval	補間された行列
//! 
//!--------------------------------------------------------------------
Matrix MatrixInterp( Matrix mat1, Matrix mat2, float time );

//!--------------------------------------------------------------------
//! 
//! @brief	指定したベクトルとベクトルを球面線形補間する	t = 補間位置 t0 = 始点ム t1 = 終点	time = ( t - t0) / ( t1 - t0 )
//! @param	[in]	vec1	-	始点回転ベクトル
//! @param	[in]	vec2	-	終点回転ベクトル
//! @param	[in]	time	-	補間位置(0〜1) 
//! @retval	補間されたベクトル
//! 
//!--------------------------------------------------------------------
Vector3 SphereLinear(  Vector3 vec1,Vector3 vec2, float time );

//!--------------------------------------------------------------------
//! 
//! @brief	指定した行列と行列を球面線形補間で補間姿勢を求める	t = 補間位置 t0 = 始点ム t1 = 終点	time = ( t - t0) / ( t1 - t0 )
//! @param	[in]	mat1	-	始点行列
//! @param	[in]	mat2	-	終点行列
//! @param	[in]	time	-	補間位置(0〜1) 
//! @retval	補間された行列
//! 
//!--------------------------------------------------------------------
Matrix CalcInterPause(  Matrix mat1, Matrix mat2, float time );

}	//	math	end
}	//	iruna	end

#endif	//	IRUNA_MATH_FUNCTION_H	end