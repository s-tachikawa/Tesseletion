//*********************************************************************
/*!
	@file	iruna_texture.h
	@brief	テクスチャを管理する
	@author	立川 翔野
	@date	2011/06/23	- 作成
	@date	2013/12/30	- 更新　DirectX11仕様に変更
*/
//*********************************************************************

/*----多重インクルード防止-------------------------------------------------*/
#ifndef IRUNA_TEXTURE_H
#define IRUNA_TEXTURE_H

/*----インクルード-------------------------------------------------*/
#include "../Include/iruna_utility.h"
#include "../Include/iruna_color4.h"
#include "../Include/iruna_surface.h"

/*----データ型 宣言------------------------------------------------*/
namespace iruna
{
namespace graphics
{

//!=====================================================================
//!
//! @class	Texture
//! @brief	テクスチャ管理クラス
//!
//!=====================================================================
class Texture
{
//	パブリック	型定義
public:
	
	typedef	D3DLOCKED_RECT	LockedRect; //!< テクスチャにアクセスするための構造体

//	プライベート	メンバ変数
private:
	ID3D11ShaderResourceView*	m_pcTexture;			//!< テクスチャクラスのポインタ
	ID3D11RenderTargetView*		m_pcRenderTargetView;	//!< バックバッファ用レンダーターゲットビュー
	ID3D11DepthStencilView*		m_pcDepthStencilView;	//!< デプスステンシルビュー
	ID3D11Texture2D*			m_pcDynamicTexture;		//!< 動的テクスチャ用テクスチャポインタ
	ID3D11Texture2D*			m_pcDepthStencil;		//!< デプスステンシル用テクスチャポインタ
	ID3D11SamplerState*			m_pcSampleLinear;		//!< テクスチャーのサンプラー
	
	std::string					recoveryPath;			//!< テクスチャーのパス

private:
	//!--------------------------------------------------------------------
	//! 
	//! @brief	レンダーターゲットを作成する
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	bool	CreateRenderTerget();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	デプスステンシルを作成する
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	bool	CreateDepthStecil( U_INT width, U_INT height );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	シェーダリソースビューの作成
	//! @param	[in] path		- ファイルへのパス
	//! @param	[in] color		- カラーキー、透過色の設定(デフォルトは0)
	//! @param	[in] mipLevel	- ミップマップレベル、0〜8を指定(デフォルトは1)
	//! @param	[in] filter		- フィルタリング(デフォルトはD3DX_FILTER_LINEAR)
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	bool	CreateShaderResourceView();

//	パブリック	メンバ関数
public:
	//!--------------------------------------------------------------------
	//! 
	//! @brief	コンストラクタ
	//! 
	//!--------------------------------------------------------------------
	Texture();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	デストラクタ
	//! 
	//!--------------------------------------------------------------------
	~Texture();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	画像ファイルからテクスチャを読み込む
	//! @param	[in] path		- ファイルへのパス
	//! @param	[in] color		- カラーキー、透過色の設定(デフォルトは0)
	//! @param	[in] mipLevel	- ミップマップレベル、0〜8を指定(デフォルトは1)
	//! @param	[in] filter		- フィルタリング(デフォルトはD3DX_FILTER_LINEAR)
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	bool	Load( std::string path, Color4 color = 0, U_INT mipLevel = 0, DWORD filter = D3DX_FILTER_LINEAR );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	画像ファイルからテクスチャを読み込む
	//! @param	[in] path		- ファイルへのパス
	//! @param	[in] color		- カラーキー、透過色の設定(デフォルトは0)
	//! @param	[in] mipLevel	- ミップマップレベル、0〜8を指定(デフォルトは1)
	//! @param	[in] filter		- フィルタリング(デフォルトはD3DX_FILTER_LINEAR)
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	bool	CreateSamplerSate();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	カラの動的テクスチャを作成する
	//! @param	[in] width		- テクスチャの横幅
	//! @param	[in] height		- テクスチャの高さ
	//! @param	[in] usage		- 使用方法(D3DUSAGE_DYNAMIC or D3DUSAGE_RENDERTARGET)
	//! @param	[in] mipLevel	- ミップマップレベル、0〜8を指定(デフォルトは1)
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	bool	CreateTexture( U_INT width, U_INT height, DWORD usage = D3D11_BIND_RENDER_TARGET | D3D11_BIND_SHADER_RESOURCE, U_INT mipLevel = 1, DXGI_FORMAT eFormat = DXGI_FORMAT_R8G8B8A8_TYPELESS );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	テクスチャを解放する
	//! 
	//!--------------------------------------------------------------------
	void	Release();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	テクスチャをロックし、アクセスするためのLockedRectを返す(動的テクスチャのみ)
	//! @param	[out] rect		- テクスチャにアクセスするための構造体
	//! @param	[in] flag		- オプションフラグ(デフォルトはD3DLOCK_DISCARD)
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	bool	Lock( LockedRect& rect, DWORD flag = D3DLOCK_DISCARD );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	テクスチャをアンロックし、アクセスできないようにする(動的テクスチャのみ)
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	bool	Unlock();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	テクスチャを取得
	//! @retval	テクスチャデータ
	//! 
	//!--------------------------------------------------------------------
	ID3D11ShaderResourceView* const GetTexture();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	テクスチャを取得
	//! @retval	テクスチャデータ
	//! 
	//!--------------------------------------------------------------------
	ID3D11SamplerState*	const GetSamplerState();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	レンダーターゲットの取得
	//! @retval	テクスチャデータ
	//! 
	//!--------------------------------------------------------------------
	ID3D11RenderTargetView*	const GetRenderTerget();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	デプスステンシルビューの取得
	//! @retval	テクスチャデータ
	//! 
	//!--------------------------------------------------------------------
	ID3D11DepthStencilView*	const GetDepthStencil();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	テクスチャのサイズを取得
	//! @retval	テクスチャサイズ
	//! 
	//!--------------------------------------------------------------------
	POINT GetSize();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	引数がID3D11Texture2D*なところにつっこむとID3D11Texture2D*として扱われる
	//! @retval	ID3D11Texture2D*型
	//! 
	//!--------------------------------------------------------------------
	inline	operator ID3D11ShaderResourceView*();

};

}	//	graphics	end
}	//	iruna		end

#endif	//	IRUNA_TEXTURE_H	end