////*********************************************************************
///*!
//	@file	iruna_text.h
//	@brief	文字列を表示する
//	@author	立川 翔野
//	@date	2011/06/24 	- 作成
//*/
////*********************************************************************
//
///*----多重インクルード防止-------------------------------------------------*/
//#ifndef IRUNA_TEXT_H
//#define IRUNA_TEXT_H
//
///*----インクルード-------------------------------------------------*/
//#include "../Include/iruna_utility.h"
//#include "../Include/iruna_math.h"
//#include "../Include/iruna_sprite.h"
//#include "../Include/iruna_color4.h"
//#include "../Include/iruna_font.h"
//#include "../Include/iruna_device_controller.h"
//
///*----データ型 宣言------------------------------------------------*/
//namespace iruna
//{
//namespace graphics
//{
//
////!=====================================================================
////!
////! @class	Text
////! @brief	文字列表示クラス(シングルトン)
////!
////!=====================================================================
//class Text
//{
//// プライベート	型定義
//private:
//	// 文字テクスチャ動的配列
//	typedef std::vector < Font* > 	FontArray;
//
//// プライベート	メンバ変数
//private:
//	FontArray			fontArray;	//!< 文字テクスチャの動的配列
//	DeviceController*	render;		//!< デバイスを間接的に操作する
//	Sprite*				sprite;		//!< 2Dビルボード
//	U_INT				nowFont;	//!< 使う文字テクスチャクラスの番号
//	static Text*		instance;	//!< インスタンス(静的メンバ関数)
//
//// プライベート	メンバ関数
//private:
//	//!--------------------------------------------------------------------
//	//! 
//	//! @brief	コンストラクタ
//	//! 
//	//!--------------------------------------------------------------------
//	Text();
//
//// パブリック		メンバ関数
//public:
//	//!--------------------------------------------------------------------
//	//! 
//	//! @brief	デストラクタ
//	//! 
//	//!--------------------------------------------------------------------
//	~Text();
//
//	//!--------------------------------------------------------------------
//	//! 
//	//! @brief	テキストクラスの唯一のインスタンス生成する関数(静的メンバ関数)
//	//! @retval	インスタンス
//	//! 
//	//!--------------------------------------------------------------------
//	static Text*&	GetInstance();
//
//	//!--------------------------------------------------------------------
//	//! 
//	//! @brief	使いたい文字の書式を設定する
//	//! @param	[in] size	- 文字のサイズ
//	//! @param	[in] type	- 文字の書体
//	//! 
//	//!--------------------------------------------------------------------
//	void	SetStyle( int size, std::string type );
//
//	//!--------------------------------------------------------------------
//	//! 
//	//! @brief	指定した位置に文字を表示する
//	//! @param	[in] x		- x座標（原点は左上）
//	//! @param	[in] y		- y座標（原点は左上）
//	//! @param	[in] str	- 表示したい文字列
//	//! @param	[in] color	- 表示する文字の色
//	//! @retval	結果フラグ	ture：成功　false：失敗
//	//! 
//	//!--------------------------------------------------------------------
//	bool	Draw( float x, float y, LPCSTR str, Color4 color );
//};
//
//}	//	graphics	end
//}	//	iruna		end
//
///*----グローバル関数 宣言----------------------------------------------------*/
//namespace iruna
//{
//namespace graphics
//{
//
////!--------------------------------------------------------------------
////! 
////! @brief	表示する文字の書式の設定をする
////! @param	[in] size	- 文字の大きさ
////! @param	[in] type	- 文字の書体
////! 
////!--------------------------------------------------------------------
//void	SetFontStyle( U_INT size, std::string type );
//
////!--------------------------------------------------------------------
////! 
////! @brief	指定した位置に文字を表示する
////! @param	[in] x		- x座標（原点は左上）
////! @param	[in] y		- y座標（原点は左上）
////! @param	[in] str	- 表示したい文字列
////! @param	[in] color	- 表示する文字の色(デフォルトは白)
////! @retval	結果フラグ	ture：成功　false：失敗
////! 
////!--------------------------------------------------------------------
//bool	DrawString( float x, float y, LPCSTR str, Color4 color = 0xFFFFFFFF );
//
////!--------------------------------------------------------------------
////! 
////! @brief	指定した位置に文字＋数値を表示する
////! @param	[in] x		- x座標（原点は左上）
////! @param	[in] y		- y座標（原点は左上）
////! @param	[in] color	- 表示する文字の色
////! @param	[in] str	- 表示したい文字列
////! @param	[in] ...	- つっこみたい数値とか
////! @retval	結果フラグ	ture：成功　false：失敗
////! 
////!--------------------------------------------------------------------
//bool	DrawFormatString( float x, float y, Color4 color, LPCSTR str, ... );
//
//}	//	graphics	end
//}	//	iruna		end
//
//#endif	//	IRUNA_TEXT_H	end