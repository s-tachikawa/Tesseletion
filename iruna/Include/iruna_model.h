//*********************************************************************
/*!
	@file	iruna_model.h
	@brief	Xファイルを読み込み・描画する(固定モデル)
	@author	立川 翔野
	@date	2011/06/27	- 作成
*/
//*********************************************************************

/*----多重インクルード防止-------------------------------------------------*/
#ifndef IRUNA_MODEL_H
#define IRUNA_MODEL_H

/*----インクルード-------------------------------------------------*/
#include "../Include/iruna_utility.h"
#include "../Include/iruna_math.h"
#include "../Include/iruna_vertex_declaration.h"
#include "../Include/iruna_texture.h"
#include "../Include/iruna_material.h"

/*----データ型 宣言------------------------------------------------*/
namespace iruna
{
namespace graphics
{

//!=====================================================================
//!
//! @class	Model
//! @brief	Xファイル固定モデル管理クラス)
//!
//!=====================================================================
class Model
{
//	プライベート	メンバ変数
private:
	LPD3DXMESH		mesh;			//!< メッシュ
	Material*		material;		//!< メッシュの質感、マテリアル
	Texture*		texture;		//!< テクスチャ
	U_LONG			materialCount;	//!< マテリアルの数
	std::string		recoveryPath;	//!< ファイルパス

//	パブリック	メンバ関数
public:

	//!--------------------------------------------------------------------
	//! 
	//! @brief	コンストラクタ
	//! 
	//!--------------------------------------------------------------------
	Model();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	デストラクタ
	//! 
	//!--------------------------------------------------------------------
	~Model();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	指定したXファイルの読み込み
	//! @param	[in] path			- Xファイルのディレクトリパス
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	bool Load( std::string path );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	モデルの描画
	//! @param	[in] count			- 何番目のメッシュを描画するか
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	bool Draw( U_LONG count );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	頂点宣言の作り直し
	//! @param	[in] element			- 新しい頂点宣言
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	bool RemakeVertexFormat( const VertexDeclaration::Element* element );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	マテリアルの個数の取得
	//! @retval	マテリアルの個数
	//! 
	//!--------------------------------------------------------------------
	U_LONG	GetMaterialCount();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	マテリアルの取得
	//! @param	[in] count			- 何番目のマテリアルを取得するか
	//! @retval	指定した番号のマテリアルデータのポインタ
	//! 
	//!--------------------------------------------------------------------
	const Material* GetMaterial( U_LONG count );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	メッシュのテクスチャの取得
	//! @param	[in] count			- 何番目のメッシュテクスチャを取得するか
	//! @retval	指定した番号のメッシュのテクスチャデータのポインタ
	//! 
	//!--------------------------------------------------------------------
	const LPDIRECT3DTEXTURE9 GetTexture( U_LONG count );

};


}	//	graphics	end
}	//	iruna		end

#endif	//	IRUNA_MODEL_H	end