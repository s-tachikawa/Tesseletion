//*********************************************************************
/*!
	@file	iruna_system.h
	@brief	ライブラリのコントロール
	@author	立川 翔野
	@date	2011/06/22	- 作成
	@date	2011/07/10	- サウンドの追加
*/
//*********************************************************************

/*----多重インクルード防止-------------------------------------------------*/
#ifndef IRUNA_SYSTEM_H
#define IRUNA_SYSTEM_H

/*----インクルード-------------------------------------------------*/
#include "../Include/iruna_utility.h"
#include "../Include/iruna_system_datas.h"


namespace iruna
{
	// 前方宣言
namespace core
{

class	Window;
class	FrameRateManage;

}	// core		end

namespace graphics
{

class	Device;
class	Text;

}	// graphics	end

namespace sound
{

	class SoundDevice;

}	//	sound	end	

namespace io
{

class	InputDevice;

}	// io		end

namespace physics
{
class PhysicsCore;

}	//	physics end

//!=====================================================================
//!
//! @class	System
//! @brief	ライブラリの起動・管理・終了をするクラス(シングルトン)
//!
//!=====================================================================
class System
{
// プライベート	メンバ変数
private:
	core::FrameRateManage*	frame;		//!< フレームレート管理クラス
	core::Window*			window;		//!< ウィンドウ管理クラス
	graphics::Device*		device;		//!< デバイス
	sound::SoundDevice*		sound;		//!< サウンドデバイス
	io::InputDevice*		input;		//!< インプットデバイス
	physics::PhysicsCore*	physics;	//!< 物理エンジン管理クラス
	graphics::Text*			text;		//!< テキスト管理クラス
	static System*			instance;	//!< インスタンス(静的メンバ変数)

// プライベート	メンバ関数
private:
	//!--------------------------------------------------------------------
	//! 
	//! @brief	コンストラクタ(外部からの呼出し禁止)
	//! 
	//!--------------------------------------------------------------------
	System();

// ●パブリック		メンバ関数
public:
	//!--------------------------------------------------------------------
	//! 
	//! @brief	デストラクタ
	//! 
	//!--------------------------------------------------------------------
	~System();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	システムクラスの唯一のインスタンス生成する関数(静的メンバ関数)
	//! @retval	Systemクラスのインスタンス
	//! 
	//!--------------------------------------------------------------------
	static System&	GetInstance();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	ウィンドウやデバイスのセットアップをする
	//! @param	[in] width	- ウィンドウの横幅
	//! @param	[in] height	- ウィンドウの高さ
	//! @param	[in] mode	- ウィンドウのモード(ウィンドウorフルスクリーン)
	//! @param	[in] name	- ウィンドウのタイトル
	//! @param	[in] iconID	- ウィンドウのアイコンのリソースID
	//! @param	[in] style	- ウィンドウのスタイル(デフォルトはWS_OVERLAPPEDWINDOW)
	//! @param	[in] speakers	- スピーカーの構成(デフォルトはSPEAKER_STEREO)
	//! @param	[in] styleEx- ウィンドウの拡張スタイル(デフォルトは0)
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	bool	Setup( U_LONG width, U_LONG height, bool mode, LPCSTR name,  U_INT speakers = SPEAKER_STEREO, DWORD style = WS_OVERLAPPEDWINDOW, DWORD styleEx = 0, WORD iconID = 0);

	//!--------------------------------------------------------------------
	//! 
	//! @brief	ウィンドウやデバイスを削除・解放をする
	//! 
	//!--------------------------------------------------------------------
	void	Release();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	システムの更新、メッセージ処理など
	//! @retval	エラーフラグ	true：問題なし　false：エラー
	//! 
	//!--------------------------------------------------------------------
	bool	Run();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	ノンアクティブ時のシステム更新
	//! @retval	エラーフラグ	true：問題なし　false：エラー
	//! 
	//!--------------------------------------------------------------------
	bool	Idle();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	ウィンドウがアクティブかノンアクティブかを取得する
	//! @retval	アクティブフラグ	true：アクティブ　false：ノンアクティブ
	//! 
	//!--------------------------------------------------------------------
	bool	IsActive();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	起動中にウィンドウモードを切り替える
	//! @param	[in] mode	- ウィンドウのモード(ウィンドウorフルスクリーン)
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	bool	ChangeWindowMode( bool mode );
};

}	//	iruna	end

#endif	//	IRUNA_SYSTEM_H