//*********************************************************************
/*!
	@file	iruna_lua_loader.h
	@brief	Luaスクリプト読み込み
	@author	立川 翔野
	@date	2011/01/30	- 作成
*/
//*********************************************************************
/*----多重インクルード------------------------------------------------*/
#ifndef IRUNA_LUA_LOADER_H
#define IRUNA_LUA_LOADER_H

/*----インクルード------------------------------------------------*/
#include "../Include/iruna_utility.h"
#include <lua.hpp>


/*----ネームスペース------------------------------------------------*/
namespace iruna
{
namespace script
{
//!=====================================================================
//!
//! @class	LuaType
//! @brief	Lua内部列挙定義
//!
//!=====================================================================
typedef enum LuaType
{
	Nill	= LUA_TNIL,				//!<	NULL
	Bool	= LUA_TBOOLEAN,			//!<	bool
	Void	= LUA_TLIGHTUSERDATA,	//!<	void
	Double	= LUA_TNUMBER,			//!<	double	
	Table	= LUA_TTABLE,			//!<	スタックテーブル
	Func	= LUA_TFUNCTION,		//!<	Lua関数定義

};

//!=====================================================================
//!
//! @class	LuaLoader
//! @brief	Luaスクリプトの読み込み
//!
//!=====================================================================
class LuaLoader
{
private:

	lua_State*	lua;			//!<	LuaState構造体
	std::string scriptPath;		//!<	ディレクトリパス

public:

	//!--------------------------------------------------------------------
	//! 
	//! @brief	コンストラクタ
	//! 
	//!--------------------------------------------------------------------
	LuaLoader();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	デストラクタ
	//! 
	//!--------------------------------------------------------------------
	~LuaLoader();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	Luaスクリプト読み込み
	//! @param	[in] in_path - スクリプトパス
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	bool Load( std::string in_path );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	解放処理
	//! 
	//!--------------------------------------------------------------------
	void Relese();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	スクリプトデータの取得
	//! @param	[inout]out_data - 取得するbool型のデータ
	//! @param	[in]in_path - 取得するスクリプト内の変数名
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	bool GetScriptData( bool& out_data, std::string in_path, int index );
	
	//!--------------------------------------------------------------------
	//! 
	//! @brief	スクリプトデータの取得
	//! @param	[inout]out_data - 取得するdouble型のデータ
	//! @param	[in]in_path - 取得するスクリプト内の変数名
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	bool GetScriptData( double& out_data, std::string in_path, int index );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	スクリプトデータの取得
	//! @param	[inout]out_data - 取得するvoid*型のデータ
	//! @param	[in]in_path - 取得するスクリプト内の変数名
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	bool GetScriptData( const void* out_data, std::string in_path, int index );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	スクリプト内の関数を呼び出す
	//! @param	[inout]in_name - 呼び出す関数名
	//! @param	[in]in_path - 取得するスクリプト内の変数名
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	bool CallFunc( std::string in_name );

};

}	//	end script
}	//	end	iruna

#endif	//	IRUNA_LUA_LOADER_H	end