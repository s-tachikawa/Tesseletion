//*********************************************************************
/*!
	@file	iruna_stream_sound.h
	@brief	サウンドのストリーム再生
	@author	立川 翔野
	@date	2011/07/10	- 作成
*/
//*********************************************************************

/*----多重インクルード防止-------------------------------------------------*/
#ifndef IRUNA_STREAM_SOUND_H
#define IRUNA_STREAM_SOUND_H

/*----マクロ-------------------------------------------------*/
#define BUFFER_NUM			2
#define PLAY_LOOP			0
#define PLAY_ONCE			-1


/*----インクルード-------------------------------------------------*/
#include "../Include/iruna_utility.h"

/*----データ型宣言-------------------------------------------------*/
namespace iruna
{
namespace sound
{
// 前方宣言
class OggDecoder;

//!=====================================================================
//!
//! @class	StreamSound
//! @brief	サウンドファイルのストリーム再生
//!
//!=====================================================================
class StreamSound : public IXAudio2VoiceCallback
{
// プライベート	メンバ変数
private:

	IXAudio2SourceVoice*	voice;					//!<	XAoudio2クラス
	OggDecoder*				decoder;				//!<	Ogg読み込みクラス
	U_CHAR*					buffer[ BUFFER_NUM ];	//!<	ストリームサウンドの個数
	U_INT					bufferSize;				//!<	ストリームサウンドの長さ
	int						loopPos;				//!<	ループするかどうか

// プライベート	メンバ関数
private:
	//!--------------------------------------------------------------------
	//! 
	//! @brief	コピーコンストラクタ(コピー禁止用)
	//! 
	//!--------------------------------------------------------------------
	StreamSound( const StreamSound& dummy );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	＝演算子のオーバーロード(コピー禁止)
	//! 
	//!--------------------------------------------------------------------
	const StreamSound&		operator =( const StreamSound& dummy );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	(コールバック関数)
	//! 
	//!--------------------------------------------------------------------
	void WINAPI				OnVoiceProcessingPassStart( UINT32 requiredSize );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	(コールバック関数)
	//! 
	//!--------------------------------------------------------------------
	void WINAPI				OnVoiceProcessingPassEnd();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	(コールバック関数)
	//! 
	//!--------------------------------------------------------------------
	void WINAPI				OnStreamEnd();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	(コールバック関数)
	//! 
	//!--------------------------------------------------------------------
	void WINAPI				OnBufferStart( void* bufContext );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	(コールバック関数)
	//! 
	//!--------------------------------------------------------------------
	void WINAPI				OnBufferEnd( void* bufContext );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	(コールバック関数)
	//! 
	//!--------------------------------------------------------------------
	void WINAPI				OnLoopEnd( void* bufContext );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	(コールバック関数)
	//! 
	//!--------------------------------------------------------------------
	void WINAPI				OnVoiceError( void* bufContext, HRESULT error );

//	パブリック	メンバ関数
public:

	//!--------------------------------------------------------------------
	//! 
	//! @brief	コンストラクタ
	//! 
	//!--------------------------------------------------------------------
	StreamSound();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	デストラクタ
	//! 
	//!--------------------------------------------------------------------
	~StreamSound();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	解放処理
	//! 
	//!--------------------------------------------------------------------
	void Release();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	サウンドファイルの読み込み
	//! @param	[in] path		- 読み込むサウンドファイルのパス
	//! @param	[out] format	- Oggファイルのフォーマット
	//! @retval	結果フラグ	-1	: 初期化失敗	-2	: ファイルポインタの作成失敗	-3	: ポインタの作成失敗
	//! 
	//!--------------------------------------------------------------------
	int LoadSound( std::string path );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	サウンドファイルの再生
	//! @param	[in] loopPos		- ループ再生させる位置
	//! @retval	結果フラグ	-1	: 初期化失敗
	//! 
	//!--------------------------------------------------------------------
	int PlaySound( int loopPos = PLAY_LOOP);

	//!--------------------------------------------------------------------
	//! 
	//! @brief	サウンドファイルのバッファの位置を0に戻す
	//! @retval	結果フラグ	-1	:	失敗
	//! 
	//!--------------------------------------------------------------------
	void StopSound();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	サウンドファイルの停止
	//! @retval	結果フラグ	-1	:	失敗
	//! 
	//!--------------------------------------------------------------------
	int PauseSound();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	音量の設定
	//! @param	[in] setVolume	- 設定する音量
	//! @retval	結果フラグ	-1	: 失敗
	//! 
	//!--------------------------------------------------------------------
	int SetVolume( float setVolume );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	再生スピードの設定
	//! @param	[in] setVolume	- 設定する再生スピード
	//! @retval	結果フラグ	-1	: 失敗
	//! 
	//!--------------------------------------------------------------------
	int SetSpeedRatio( float ratio );

};

}	//	sound	end
}	//	iruna	end
/*
	メモ
		まだOggファイルの読み込みしかできないので
		今後は複数の拡張子を読み込めるようにする。
*/
#endif	//	IRUNA_STREAM_SOUND_H	end