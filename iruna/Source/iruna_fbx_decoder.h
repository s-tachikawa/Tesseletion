//*********************************************************************
/*!
	@file	iruna_fbx_decoder.h
	@brief	FBXファイル読み込みクラス
	@author	立川 翔野
	@date	2011/10/21 	- 作成
*/
//*********************************************************************
/*----多重インクルード---------------------------------*/
#ifndef FBX_DECODER_H
#define FBX_DECODER_H

/*----プリプロセッサディレクティブ---------------------------------*/
#pragma warning(disable: 4100)
#pragma warning(disable: 4512)

/*----インクルード---------------------------------*/
#include <string>
#include "fbxsdk.h"
#include <crtdbg.h>
#include "../Include/iruna_model_data.h"
#include "../Source/iruna_model_decoder.h"

/*----ネームスペース---------------------------------*/
namespace iruna
{
namespace graphics
{

//!=====================================================================
//!
//! @class	FbxDecoder
//! @brief	指定したFBXファイルを読み込む
//!
//!=====================================================================
class FbxDecoder : public ModelDecoder
{
//	プライベートメンバ変数
private:

	KFbxSdkManager*				pSdkManager;	//!<	FBXSDKを使うためのマネージャークラスのポインタ
	KFbxScene*					pFbxScene;		//!<	FBXのシーンクラスのポインタ
	KFbxImporter*				pImporter;		//!<	FBXファイルのインポートクラス
	ModelData*					saveData;		//!<	FBXから読み込んだデータを格納

//	プライベートメンバ関数
private:

	//!--------------------------------------------------------------------
	//! 
	//! @brief	FBXファイル内のノードを作成(再帰関数)
	//! @param	[in] pNode			- 自身に対しての親ノード
	//! @param	[in] parentId		- 親ノードのID
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	bool CreateNode( KFbxNode* pNode, int parentId = -1 );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	作成したノードからメッシュデータを作成する
	//! @param	[in] pAttrib		- メッシュデータが入ったノードデータ
	//! @param	[inout] mesh		- 作成したメッシュデータを格納するポインタ
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	bool CreateMesh( KFbxNodeAttribute* pAttrib ,MeshData* mesh );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	作成したノードからランバートマテリアルを作成する
	//! @param	[in] material	-	マテリアルデータが入ったノードデータ
	//! @param	[inout] mat		-	作成したマテリアルデータを格納するポインタ
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	bool CreateLambert( KFbxSurfaceLambert* material, MaterialData* mat );

//	パブリックメンバ関数
public:

	//!--------------------------------------------------------------------
	//! 
	//! @brief	コンストラクタ
	//! 
	//!--------------------------------------------------------------------
	FbxDecoder();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	デストラクタ
	//! 
	//!--------------------------------------------------------------------
	~FbxDecoder();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	解放処理
	//! 
	//!--------------------------------------------------------------------
	void			Relese();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	初期化
	//! 
	//!--------------------------------------------------------------------
	void			Init();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	指定したパスでFBXファイルを読み込む
	//! @param	[in] in_path	-	FBXファイルのディレクトリ
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	bool			Decode( std::string in_path, int in_type );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	読み込んだFBXファイルのデータを取得する
	//! @retval	Modelデータが入った構造体ポインタ
	//! 
	//!--------------------------------------------------------------------
	ModelData*		GetModelData();

};

}	//	graphics	end
}	//	iruna		end


#endif	//	FBX_DECODER_H	end