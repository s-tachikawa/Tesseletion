//*********************************************************************
/*!
	@file	iruna_device.h
	@brief	デバイスの管理と生成
	@author	立川 翔野
	@date	2011/06/22	- 作成
*/
//*********************************************************************

/*----多重インクルード防止-------------------------------------------------*/
#ifndef IRUNA_DEVICE_H
#define IRUNA_DEVICE_H

/*----インクルード-------------------------------------------------*/
#include "../Include/iruna_utility.h"
#include "../Include/iruna_math.h"
/*----データ型 宣言------------------------------------------------*/
namespace iruna
{
namespace graphics
{

//!=====================================================================
//!
//! @class	Device
//! @brief	デバイス管理クラス
//!
//!=====================================================================

class Device
{
//	プライベート	メンバ変数
private:

	static ID3D11Device*					m_pcDevice;					//!< デバイス
	static ID3D11DeviceContext*				m_pcDeviceContext;			//!< D3D11デバイスコンテキストインタフェース
	static IDXGISwapChain*					m_pcSwapChain;				//!< スワップチェイン
	static ID3D11RenderTargetView*			m_pcRenderTargetView;		//!< バックバッファ用レンダーターゲットビュー
	static ID3D11RasterizerState*			m_pcRasterizestate;			//!< ラスタライズ用ステート
	static ID3D11DepthStencilView*			m_pcDepthStencilView;		//!< デプスステンシルビュー
	static ID3D11Texture2D*					m_pcDepthStencil;			//!< デプスステンシル用テクスチャ

	static D3D11_RASTERIZER_DESC			m_sRas;						//!< ラスタライズデータ
	static D3D11_VIEWPORT					m_sViewPort;				//!< ビューポート
	ID3D11BlendState*						m_pcBlendState;				//!< テクスチャのブレンドステート
//	プライベート	メンバ関数
private:

//	パブリック		メンバ関数
public:
	//!--------------------------------------------------------------------
	//! 
	//! @brief	コンストラクタ
	//! 
	//!--------------------------------------------------------------------
	Device();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	デストラクタ
	//! 
	//!--------------------------------------------------------------------
	~Device();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	デバイスとスワップチェインを作成する
	//! @param	[in] hWindow	- ウィンドウハンドル
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	bool	Create( HWND hWindow, U_LONG width, U_LONG height, bool mode = true );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	裏画面をクリアし、描画を開始する(静的メンバ関数)
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	static bool	ClearScreen( float r = 1.0f, float g = 1.0f, float b = 1.0f, float a = 1.0f);

	//!--------------------------------------------------------------------
	//! 
	//! @brief	描画を終了し、裏画面に描いたものを表画面へ転送(静的メンバ関数)
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	static bool	SwapScreen();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	裏画面をクリアし、描画を開始する(静的メンバ関数)
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	static bool	ClearBackBuffer( math::Vector4 vColor, ID3D11RenderTargetView* pcRenderTerget, ID3D11DepthStencilView* pcDepthStencil );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	デフォルトのレンダーターゲットの取得(バックバッファの取得)
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	static ID3D11RenderTargetView* GetRenderTargetView();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	デフォルトのデプスステンシルビューの取得
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	static ID3D11DepthStencilView* GetDepthStencilView();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	デフォルトのビューポートを取得
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	static D3D11_VIEWPORT* GetViewPort();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	デフォルトのラスタライズステートの取得
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	static D3D11_RASTERIZER_DESC* GetRasterizerState();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	デバイスを取得する(静的メンバ関数)
	//! @retval	デバイス
	//! 
	//!--------------------------------------------------------------------
	static ID3D11Device*	GetDevice();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	デバイスコンテキストを取得する(静的メンバ関数)
	//! @retval	デバイス
	//! 
	//!--------------------------------------------------------------------
	static ID3D11DeviceContext*	GetDeviceContext();
};

}	//	graphics	end
}	//	iruna		end


#endif // IRUNA_DEVICE_H
