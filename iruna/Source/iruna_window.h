//*********************************************************************
/*!
	@file	iruna_window.h
	@brief	ウィンドウのコントロール
	@author	立川 翔野
	@date	2011/06/22	- 作成
*/
//*********************************************************************

/*----多重インクルード防止-------------------------------------------------*/
#ifndef IRUNA_WINDOW_H
#define IRUNA_WINDOW_H

/*----インクルード-------------------------------------------------*/
#include "../Include/iruna_utility.h"

/*----データ型 宣言------------------------------------------------*/
namespace iruna
{
namespace core
{

//!=====================================================================
//!
//! @class	Window
//! @brief	ウィンドウ管理クラス
//!
//!=====================================================================
class Window
{
// プライベート	メンバ変数
private:
	bool			winMode;	//!<	ウィンドウモードフラグ
	U_LONG			winWidth;	//!<	ウィンドウの横幅
	U_LONG			winHeight;	//!<	ウィンドウの高さ
	LPCSTR			winName;	//!<	ウィンドウの名前
	DWORD			winStyle;	//!<	ウィンドウのスタイル
	DWORD			winStyleEx;	//!<	ウィンドウの拡張スタイル
	WORD			winIcon;	//!<	ウィンドウアイコンID
	HWND			hWindow;	//!<	ウィンドウハンドル
	static LPCSTR	CLASS_NAME;	//!<	ウィンドウクラスの名前(定数)

// プライベート	メンバ関数
private:
	//!--------------------------------------------------------------------
	//! 
	//! @brief	ウィンドウプロシージャ
	//! @param	[in] hWindow	- ウィンドウハンドル
	//! @param	[in] message	- メッセージ
	//! @param	[in] wParam		- wパラメータ
	//! @param	[in] lParame	- lパラメータ
	//! @retval	関数の結果
	//! 
	//!--------------------------------------------------------------------
	static LRESULT CALLBACK WindowProc( HWND hWindow, UINT message, WPARAM wParam, LPARAM lParame );

// パブリック		メンバ関数
public:
	//!--------------------------------------------------------------------
	//! 
	//! @brief	コンストラクタ
	//! 
	//!--------------------------------------------------------------------
	Window();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	デストラクタ
	//! 
	//!--------------------------------------------------------------------
	~Window();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	ウィンドウの名前を設定する
	//! @param	[in] name	- 設定するウィンドウの名前
	//! 
	//!--------------------------------------------------------------------
	void	SetName( LPCSTR name );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	ウィンドウのサイズを設定する
	//! @param	[in] width	- 設定するウィンドウの横幅
	//! @param	[in] height	- 設定するウィンドウの高さ
	//! 
	//!--------------------------------------------------------------------
	void	SetSize( U_LONG width, U_LONG height );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	ウィンドウのモードを設定する(ウィンドウorフルスクリーン)
	//! @param	[in] mode	- 設定するウィンドウのモード　ture：ウィンドウ　false：フルスクリーン
	//! 
	//!--------------------------------------------------------------------
	void	SetMode( bool mode );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	ウィンドウのスタイルを設定する
	//! @param	[in] style		- 設定するウィンドウのスタイル
	//! @param	[in] styleEx	- 設定するウィンドウの拡張スタイル
	//! 
	//!--------------------------------------------------------------------
	void	SetStyle( DWORD style, DWORD styleEx );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	ウィンドウのアイコンを設定
	//! @param	[in] icon		- 設定するアイコンのリソースID
	//! 
	//!--------------------------------------------------------------------
	void	SetIcon( WORD icon );

	//!--------------------------------------------------------------------
	//! 
	//! @brief	ウィンドウの横幅を返す
	//! @retval	ウィンドウの横幅
	//! 
	//!--------------------------------------------------------------------
	U_LONG	GetWidth();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	ウィンドウの高さを返す
	//! @retval	ウィンドウの高さ
	//! 
	//!--------------------------------------------------------------------
	U_LONG	GetHeight();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	ウィンドウのモードを返す
	//! @retval	ウィンドウのモード
	//! 
	//!--------------------------------------------------------------------
	bool	GetMode();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	ウィンドウハンドルを返す(静的メンバ関数)
	//! @retval	ウィンドウハンドル
	//! 
	//!--------------------------------------------------------------------
	HWND	GetHandle();

	//!--------------------------------------------------------------------
	//! 
	//! @brief	ウィンドウを作成
	//! @retval	結果フラグ	ture：成功　false：失敗
	//! 
	//!--------------------------------------------------------------------
	bool	Create();
};


}	// core		end
}	// iruna	end
#endif // IRUNA_WINDOW_H	end
